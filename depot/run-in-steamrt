#!/bin/sh

# run-in-steamrt — undo the Steam Runtime's environment and use
# a given runtime, assuming the layout of the SteamLinuxRuntime depot.
#
# Copyright © 2019-2020 Collabora Ltd.
#
# SPDX-License-Identifier: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -eu

me="$(readlink -f "$0")"
here="${me%/*}"
me="${me##*/}"
NULL=

if [ "x${STEAM_RUNTIME_CONTAINER_TEST-}" = x1 ]; then
    echo "$me: STEAM_RUNTIME_CONTAINER_TEST=1 is deprecated, please set PRESSURE_VESSEL_WRAP_GUI=1 if you want the 'developer mode' GUI" >&2
    export PRESSURE_VESSEL_WRAP_GUI=1
fi

arch=amd64,i386
basename=
deploy=
runtime=com.valvesoftware.SteamRuntime.Platform
suite=
name=
verbose=

log () {
    printf '%s\n' "$me: $*" >&2
}

verbose () {
    if [ -n "$verbose" ]; then
        log "$@"
    fi
}

usage () {
    local code="$1"
    shift

    if [ "$code" -ne 0 ]; then
        exec >&2
    fi

    echo "Usage:"
    echo "$me [OPTIONS] NAME [-- [PVW_OPTIONS] [--]] PROGRAM ARGS"
    echo
    echo "Run a program in a runtime."
    echo
    echo "PVW_OPTIONS, PROGRAM, ARGS are passed to pressure-vessel-wrap."
    echo "Run 'pressure-vessel-wrap --help' for more details."
    echo
    echo "Required arguments"
    echo "NAME              Use the 'files' subdirectory of NAME for the"
    echo "                  runtime's content."
    echo
    echo "Options (default shown in [])"
    echo "--arch=ARCH       Use architecture(s) ARCH [amd64,i386]"
    echo "--basename=BASE   Use filenames based on BASE [RUNTIME-SUITE-ARCH]"
    echo "--deploy          Automatically deploy new versions from an archive"
    echo "                  if available, and make NAME a symbolic link"
    echo "                  to the latest"
    echo "--runtime RUNTIME Use runtime RUNTIME"
    echo "                  [com.valvesoftware.SteamRuntime.Platform]"
    echo "--suite=SUITE     Use suite SUITE [NAME]"
    exit "$code"
}

check_ok_for_filename () {
    case "$2" in
        (*/*)
            log "Error: $1 cannot contain a slash"
            return 1
            ;;

        (-*)
            log "Error: $1 cannot start with a dash"
            return 1
            ;;

        (.*)
            log "Error: $1 cannot start with a dot"
            return 1
            ;;
    esac
}

getopt_temp="help"
getopt_temp="${getopt_temp},architecture:,arch:"
getopt_temp="${getopt_temp},basename:"
getopt_temp="${getopt_temp},deploy"
getopt_temp="${getopt_temp},runtime:"
getopt_temp="${getopt_temp},suite:"
getopt_temp="${getopt_temp},verbose"

getopt_temp="$(getopt -o '' --long "$getopt_temp" -n "$me" -- "$@")"
eval "set -- $getopt_temp"
unset getopt_temp

while [ "$#" -gt 0 ]; do
    case "$1" in
        (--help)
            usage 0
            # not reached
            ;;

        (--architecture | --arch)
            arch="$2"
            shift 2
            ;;

        (--basename)
            basename="$2"
            shift 2
            ;;

        (--deploy)
            deploy=yes
            shift
            ;;

        (--runtime)
            runtime="$2"
            shift 2
            ;;

        (--suite)
            suite="$2"
            shift 2
            ;;

        (--verbose)
            verbose=yes
            shift
            ;;

        (--)
            shift
            break
            ;;

        (-*)
            log "Unknown option: $1"
            usage 64    # EX_USAGE from sysexits.h
            # not reached
            ;;

        (*)
            break
            ;;
    esac
done

if [ "$#" -eq 0 ] || [ "x$1" = x-- ]; then
    log "Error: A runtime to use is required"
    usage 64
fi

name="$1"
verbose "Runtime name: $name"
shift

if [ -z "$suite" ]; then
    suite="${name}"
fi

if [ -z "$basename" ]; then
    basename="${runtime}-${arch}-${suite}"
fi

verbose "Architecture(s): $arch"
verbose "Basename: $basename"
verbose "Runtime: $runtime"
verbose "Suite: $suite"
verbose "Deploy: ${deploy:-no}"

check_ok_for_filename ARCH "$arch"
check_ok_for_filename BASENAME "$basename"
check_ok_for_filename NAME "$name"
check_ok_for_filename RUNTIME "$runtime"
check_ok_for_filename SUITE "$suite"

adverb="$here/pressure-vessel/bin/pressure-vessel-adverb"

# Fallback to the old name
if ! [ -x "$adverb" ]; then
    adverb="$here/pressure-vessel/bin/pressure-vessel-with-lock"
fi

if [ -n "$deploy" ]; then
    if ! current_build_id="$(cat "${here}/${basename}-buildid.txt")"; then
        # Ignore: there is no build ID in the depot. We'll just use a
        # ${name} directory if it exists.
        :
    elif [ -d "${here}/${name}_${current_build_id}/files" ] \
        && [ -d "${here}/${name}" ] \
        && [ -L "${here}/${name}" ] \
        && [ "x$(readlink "${here}/${name}")" = "x${name}_${current_build_id}" ]
    then
        # Fast path: skip the locking and the deploy step if the correct runtime
        # is already in place.
        :
    else
        # Take a lock on this directory while we deploy new runtimes, to avoid
        # two runs fighting.
        (
            unset LD_LIBRARY_PATH
            unset LD_PRELOAD
            "$adverb" \
                --create --write --wait \
                --lock-file "$here/.ref" \
                -- \
                "$here/deploy-runtime" \
                --arch="${arch}" \
                --basename="${basename}" \
                --runtime="${runtime}" \
                --suite="${suite}" \
                --name="${name}" \
                ${verbose:+--verbose} \
                ${NULL+}
        )
    fi
fi

if [ -d "${here}/var" ] && [ -z "${PRESSURE_VESSEL_COPY_RUNTIME_INTO+set}" ]; then
    export PRESSURE_VESSEL_COPY_RUNTIME_INTO="${here}/var"
fi

export PRESSURE_VESSEL_RUNTIME_BASE="${here}"
export PRESSURE_VESSEL_RUNTIME="${name}/files"
exec "$here/pressure-vessel/bin/pressure-vessel-unruntime" "$@"

# vim:set sw=4 sts=4 et:
