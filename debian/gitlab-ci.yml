variables:
    BUILD_DEPENDENCIES: >-
        build-essential
        chrpath
        debhelper
        devscripts
        dpkg-dev
        git
        glslang-tools
        gtk-doc-tools
        libcap-dev
        libelf-dev
        libegl1-mesa-dev
        libgl1-mesa-dev
        libgles2-mesa-dev
        libglib2.0-dev
        libglib2.0-doc
        libjson-glib-dev
        libtheora-dev
        libva-dev
        libvdpau-dev
        libvulkan-dev
        libwaffle-dev
        libx11-dev
        libxau-dev
        libxcb1-dev
        libxcomposite-dev
        locales
        meson
        pandoc
        python3
        rsync
        zlib1g

    IMAGES_DOWNLOAD_URL: ''
    IMAGES_DOWNLOAD_CREDENTIAL: ''

    DEBIAN_FRONTEND: noninteractive

    SCOUT_DOCKER_REGISTRY: '${CI_REGISTRY}'
    SCOUT_DOCKER_IMAGE: steamrt/scout/sdk:beta
    SCOUT_I386_DOCKER_IMAGE: steamrt/scout/sdk/i386:beta
    SCOUT_APT_SOURCES_FILE: ''
    # There's no public Docker image for heavy right now
    HEAVY_DOCKER_REGISTRY: ''
    HEAVY_DOCKER_IMAGE: ''
    HEAVY_APT_SOURCES_FILE: ''
    SOLDIER_DOCKER_REGISTRY: '${CI_REGISTRY}'
    SOLDIER_DOCKER_IMAGE: steamrt/soldier/sdk:beta
    SOLDIER_APT_SOURCES_FILE: ''
    SNIPER_DOCKER_REGISTRY: '${CI_REGISTRY}'
    SNIPER_DOCKER_IMAGE: steamrt/sniper/sdk:beta
    SNIPER_APT_SOURCES_FILE: ''
    # There's no public Docker image for medic right now
    MEDIC_DOCKER_REGISTRY: ''
    MEDIC_DOCKER_IMAGE: ''
    MEDIC_APT_SOURCES_FILE: ''
    # Set non-empty to allow
    CI_ALLOW_MISSING_SOURCES: ''

    # Work around _srt_rm_rf behaving oddly on overlayfs:
    # we use FTW_MOUNT to make sure we won't accidentally traverse
    # between filesystems, but on overlayfs files can appear to be on
    # different devices
    STEAM_CI_TMPDIR: "${CI_PROJECT_DIR}/_build/tmpdir"

    # These need to be configured in
    # https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/settings/ci_cd
    # Hostname of the machine that receives pressure-vessel releases
    PRESSURE_VESSEL_CI_UPLOAD_HOST: ''
    # Create a File variable with the public key(s) of P_V_CI_UPLOAD_HOST,
    # in the usual ~/.ssh/known_hosts format:
    # upload-host.example ssh-rsa AAA...
    # upload-host.example ecdsa-sha2-nistp256 AAA...
    # upload-host.example ssh-ed25519 AAA...
    PRESSURE_VESSEL_CI_UPLOAD_HOST_SSH_PUBLIC_KEYS_FILE: ''
    # Path on P_V_CI_UPLOAD_HOST: /srv/VHOST/www/pressure-vessel/snapshots
    PRESSURE_VESSEL_CI_UPLOAD_PATH: ''
    # Path on P_V_CI_UPLOAD_HOST: /srv/.../dbgsym/pressure-vessel
    PRESSURE_VESSEL_CI_UPLOAD_DBGSYM_PATH: ''
    # Similar path on P_V_CI_UPLOAD_HOST for unreleased test-builds
    PRESSURE_VESSEL_CI_UPLOAD_PLAYGROUND_PATH: ''
    PRESSURE_VESSEL_CI_UPLOAD_PLAYGROUND_DBGSYM_PATH: ''
    # User to log in on P_V_CI_UPLOAD_HOST
    PRESSURE_VESSEL_CI_UPLOAD_USER: ''
    # Create a File variable with a private key authorized for P_V_CI_UPLOAD_USER
    PRESSURE_VESSEL_CI_UPLOAD_SSH_PRIVATE_KEY_FILE: ''

default:
    before_script: &common_before_script
        - mkdir -p -m700 "${STEAM_CI_TMPDIR}"
        - export TMPDIR="${STEAM_CI_TMPDIR}"
        - chmod -R a+rX,og-w .
        - umask 022

    tags:
        - docker
        - internal
        - linux
        - x86_64

workflow:
    rules:
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
          when: never
        - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
          when: never
        - when: always

stages:
    - build
    - relocatable-install
    - deploy
    - test

.build_deb:
    stage: build
    image: ${BUILD_IMAGE}
    before_script:
        - *common_before_script
        - ./ci/prepare-deb.sh
    script:
        - ./ci/build-deb.sh $BUILD_DEPENDENCIES
    artifacts:
        paths:
            - _build/meson-logs/*.txt
            - debian/tmp/artifacts/build
        when: always

package:
    extends: .build_deb
    variables:
        BUILD_IMAGE: '${SCOUT_DOCKER_REGISTRY}/${SCOUT_DOCKER_IMAGE}'
        STEAM_CI_DEB_BUILD: full    # debuild --build=full, aka -F

package:i386:
    extends: .build_deb
    variables:
        BUILD_IMAGE: '${SCOUT_DOCKER_REGISTRY}/${SCOUT_I386_DOCKER_IMAGE}'
        STEAM_CI_DEB_BUILD: any     # debuild --build=any, aka -B

package:heavy:
    extends: .build_deb
    rules:
        - if: '$HEAVY_DOCKER_REGISTRY != "" && $HEAVY_DOCKER_IMAGE != ""'
    variables:
        BUILD_IMAGE: '${HEAVY_DOCKER_REGISTRY}/${HEAVY_DOCKER_IMAGE}'
        STEAM_CI_DEB_BUILD: full

package:soldier:
    extends: .build_deb
    variables:
        BUILD_IMAGE: '${SOLDIER_DOCKER_REGISTRY}/${SOLDIER_DOCKER_IMAGE}'
        STEAM_CI_DEB_BUILD: full

package:sniper:
    extends: .build_deb
    variables:
        BUILD_IMAGE: '${SNIPER_DOCKER_REGISTRY}/${SNIPER_DOCKER_IMAGE}'
        STEAM_CI_DEB_BUILD: full

build:devel:
    stage: build
    rules:
        - if: '$DEVEL_DOCKER_REGISTRY != "" && $DEVEL_DOCKER_IMAGE != ""'
    image: "${DEVEL_DOCKER_REGISTRY}/${DEVEL_DOCKER_IMAGE}"
    before_script:
        - *common_before_script
        - ./ci/prepare-deb.sh $BUILD_DEPENDENCIES
    script:
        - |
            set -eux

            mkdir -p _build
            meson \
                -Dlibcurl_compat=true \
                -Dman=enabled \
                --werror \
                _build/devel
            ninja -C _build/devel
            ninja -C _build/devel install
            G_MESSAGES_DEBUG=all meson test -C _build/devel

            ci/scout-layered.sh

    artifacts:
        paths:
            - _build/devel/meson-logs/*.txt
            - _build/scout-layered/steam-container-runtime.tar.gz
        when: always

build:clang:
    stage: build
    rules:
        - if: '$DEVEL_DOCKER_REGISTRY != "" && $DEVEL_DOCKER_IMAGE != ""'
    image: "${DEVEL_DOCKER_REGISTRY}/${DEVEL_DOCKER_IMAGE}"
    before_script:
        - *common_before_script
        - ./ci/prepare-deb.sh $BUILD_DEPENDENCIES clang clang-tools
    script:
        - |
            set -eux

            export CC=clang
            export CXX=clang++

            # gtk-doc doesn't play nicely with AddressSanitizer, so
            # disable it here (it's also rather slow, so only use it
            # for one build, the 'devel' build above)
            meson \
                -Db_lundef=false \
                -Db_sanitize=address,undefined \
                -Dgtk_doc=disabled \
                -Dlibcurl_compat=true \
                --werror \
                _build/clang-asan
            ninja -C _build/clang-asan
            ninja -C _build/clang-asan install
            G_MESSAGES_DEBUG=all meson test -C _build/clang-asan

    artifacts:
        paths:
            - _build/clang-asan/meson-logs/*.txt
        when: always

.relocatable_install:
    stage: relocatable-install
    before_script:
        - ./ci/prepare-deb.sh $BUILD_DEPENDENCIES
        - |
            set -eux

            # We need up-to-date packages for the relocatable install to
            # be able to get its source code
            apt-get -y dist-upgrade

            # g++ 4.6 is too old (see also debian/rules)
            export CC=gcc-4.8
            export CXX=g++-4.8

            mkdir -p _build/scout

relocatable-install:i386:
    extends: .relocatable_install
    needs:
        - package       # for the source code
        - package:i386
    image: "${SCOUT_DOCKER_REGISTRY}/${SCOUT_I386_DOCKER_IMAGE}"
    script:
        - |
            mkdir -p _build/cache
            dcmd cp -al debian/tmp/artifacts/build/*.dsc _build/cache

            dpkg -i \
            debian/tmp/artifacts/build/*_i386.*deb \
            ${NULL+}

            rm -fr _build/i386/relocatable-install
            mkdir -p _build/i386
            python3.5 pressure-vessel/build-relocatable-install.py \
              --cache _build/cache \
              --output _build/i386/relocatable-install \
              --archive "$(pwd)/_build/i386" \
              --no-archive-versions \
              --architecture-name i386 \
              --architecture-multiarch i386-linux-gnu \
              ${CI_ALLOW_MISSING_SOURCES:+--allow-missing-sources} \
              ${NULL+}
            PYTHONPATH=$(pwd)/tests \
            python3.5 ./tests/pressure-vessel/relocatable-install.py \
              --multiarch-tuple=i386-linux-gnu \
              "$(pwd)/_build/i386/relocatable-install"
    artifacts:
        paths:
            - _build/i386/pressure-vessel-i386.tar.gz
        when: on_success

relocatable-install:production:
    extends: .relocatable_install
    needs:
        - package
        - package:i386
    image: "${SCOUT_DOCKER_REGISTRY}/${SCOUT_DOCKER_IMAGE}"
    script:
        - |
            mkdir -p _build/cache
            dcmd cp -al debian/tmp/artifacts/build/*.dsc _build/cache

            apt-get -y --no-install-recommends install \
            libglib2.0-dev:amd64 \
            libglib2.0-dev:i386 \
            libxau-dev:amd64 \
            libxau-dev:i386 \
            meson \
            ${NULL+}

            dpkg -i \
            debian/tmp/artifacts/build/*_amd64.*deb \
            debian/tmp/artifacts/build/libsteam-runtime-shim-libcurl4_*_i386.*deb \
            debian/tmp/artifacts/build/libsteam-runtime-tools-0-0-dbgsym_*_i386.*deb \
            debian/tmp/artifacts/build/libsteam-runtime-tools-0-0_*_i386.deb \
            debian/tmp/artifacts/build/libsteam-runtime-tools-0-dev_*_i386.deb \
            debian/tmp/artifacts/build/libsteam-runtime-tools-0-helpers-dbgsym_*_i386.*deb \
            debian/tmp/artifacts/build/libsteam-runtime-tools-0-helpers_*_i386.deb \
            debian/tmp/artifacts/build/libsteam-runtime-tools-0-relocatable-libs_*_i386.deb \
            debian/tmp/artifacts/build/pressure-vessel-libs-i386_*_i386.deb \
            ${NULL+}

            rm -fr _build/production/relocatable-install
            mkdir -p _build/production
            python3.5 pressure-vessel/build-relocatable-install.py \
              --cache _build/cache \
              --output _build/production/relocatable-install \
              --archive "$(pwd)/_build/production" \
              --no-archive-versions \
              ${CI_ALLOW_MISSING_SOURCES:+--allow-missing-sources} \
              ${NULL+}
            PYTHONPATH=$(pwd)/tests \
            python3.5 ./tests/pressure-vessel/relocatable-install.py \
              "$(pwd)/_build/production/relocatable-install"
    artifacts:
        paths:
            - _build/production/pressure-vessel-bin.tar.gz
            - _build/production/pressure-vessel-bin+src.tar.gz
        when: on_success

.test_template:
    needs:
        - relocatable-install:production
    stage: test
    artifacts:
        paths:
            - _build/artifacts
        when: always

.run_test: &run_test
    - |
        set -eux

        ./tests/pressure-vessel/prepare-test-depots.sh

        export AUTOPKGTEST_ARTIFACTS="$(pwd)/_build/artifacts"
        export PRESSURE_VESSEL_TEST_CONTAINERS="$(pwd)/_build/depot"
        PYTHONPATH=$(pwd)/tests \
        python3 tests/pressure-vessel/containers.py

.test_deb:
    script:
        - |
            set -eux

            dpkg --add-architecture i386
            apt-get -y update
            apt-get -y upgrade

            ./ci/prepare-deb.sh \
                libc6-i386 \
                libgl1-mesa-dri \
                libgl1-mesa-dri:i386 \
                locales \
                python3 \
                python3-debian \
                time \
                ${NULL+}

        - *run_test

test:debian-10:
    extends: .test_deb
    image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/debian:buster-slim

test:ubuntu-18.04:
    extends: .test_deb
    image: ubuntu:18.04

test:ubuntu-20.04:
    extends: .test_deb
    image: ubuntu:20.04

test:archlinux:
    extends: .test_template
    image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/archlinux:latest
    script:
        - ./ci/prepare-arch.sh
        - |
            tempdir="$(mktemp -d)"
            git clone --branch debian/buster https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.steamos.cloud/packaging/python-debian.git "$tempdir/python-debian"
            export PYTHONPATH="$tempdir/python-debian/lib"
        - *run_test

autopkgtest:
    stage: test
    image: "${SCOUT_DOCKER_REGISTRY}/${SCOUT_DOCKER_IMAGE}"
    needs:
        - package
        - package:i386
    script:
        - ./ci/prepare-deb.sh
        - ./ci/autopkgtest.sh
    artifacts:
        paths:
            - debian/tmp/artifacts/autopkgtest

deploy:
    stage: deploy
    needs:
        - build:devel                   # for steam-container-runtime.tar.gz
        - package
        - package:i386
        - relocatable-install:production
    rules:
        - if: '$DEVEL_DOCKER_REGISTRY == ""'
          when: never
        - if: '$DEVEL_DOCKER_IMAGE == ""'
          when: never
        - if: '$PRESSURE_VESSEL_CI_UPLOAD_HOST == ""'
          when: never
        - if: '$PRESSURE_VESSEL_CI_UPLOAD_HOST_SSH_PUBLIC_KEYS_FILE == ""'
          when: never
        - if: '$CI_COMMIT_TAG && $PRESSURE_VESSEL_CI_UPLOAD_PATH == ""'
          when: never
        - if: >-
            $PRESSURE_VESSEL_CI_UPLOAD_PATH == ""
            && $PRESSURE_VESSEL_CI_UPLOAD_PLAYGROUND_PATH == ""
          when: never
        - if: '$PRESSURE_VESSEL_CI_UPLOAD_USER == ""'
          when: never
        - if: '$PRESSURE_VESSEL_CI_UPLOAD_SSH_PRIVATE_KEY_FILE == ""'
          when: never
        - if: '$CI_COMMIT_TAG'
          when: on_success
        # To debug changes to this CI step, change this to when: on_success
        # or when: manual, and push to a protected branch
        - when: never
    image: "${DEVEL_DOCKER_REGISTRY}/${DEVEL_DOCKER_IMAGE}"
    before_script:
        - *common_before_script
        - ./ci/prepare-deb.sh devscripts openssh-client rsync
    script:
        - |
            if ! [ -f "$PRESSURE_VESSEL_CI_UPLOAD_HOST_SSH_PUBLIC_KEYS_FILE" ]; then
                echo "P_V_CI_UPLOAD_HOST_SSH_PUBLIC_KEYS_FILE must be of type File" >&2
                exit 1
            fi
            if ! [ -f "$PRESSURE_VESSEL_CI_UPLOAD_SSH_PRIVATE_KEY_FILE" ]; then
                echo "P_V_CI_UPLOAD_SSH_PRIVATE_KEY_FILE must be of type File" >&2
                exit 1
            fi
            chmod 0600 "$PRESSURE_VESSEL_CI_UPLOAD_SSH_PRIVATE_KEY_FILE"

            if [ -n "${CI_COMMIT_TAG-}" ]; then
                path="$PRESSURE_VESSEL_CI_UPLOAD_PATH"
                dbgsym_path="$PRESSURE_VESSEL_CI_UPLOAD_DBGSYM_PATH"
            else
                path="$PRESSURE_VESSEL_CI_UPLOAD_PLAYGROUND_PATH"
                dbgsym_path="$PRESSURE_VESSEL_CI_UPLOAD_PLAYGROUND_DBGSYM_PATH"
            fi

            ./pressure-vessel/upload-artifacts.py \
            --host="$PRESSURE_VESSEL_CI_UPLOAD_HOST" \
            --path="$path" \
            --dbgsym-path="$dbgsym_path" \
            --login="$PRESSURE_VESSEL_CI_UPLOAD_USER" \
            --ssh-known-hosts="$PRESSURE_VESSEL_CI_UPLOAD_HOST_SSH_PUBLIC_KEYS_FILE" \
            --ssh-private-key="$PRESSURE_VESSEL_CI_UPLOAD_SSH_PRIVATE_KEY_FILE" \
            ${NULL+}

.test-populate-depot:
    stage: test
    script:
        - make -C subprojects/container-runtime check
    artifacts:
        paths:
            - subprojects/container-runtime/depots/*.txt
            - subprojects/container-runtime/depots/*/VERSIONS.txt

.test-populate-depot:deb:
    before_script:
        - |
            set -eux
            export DEBIAN_FRONTEND=noninteractive
            apt-get -y update
            apt-get -y install \
                ca-certificates \
                git \
                make \
                perl \
                python3 \
                python3-debian \
                xz-utils \
                ${NULL+}
            tempdir="$(mktemp -d)"
            git clone --branch steamrt/soldier https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.steamos.cloud/packaging/python-vdf.git "$tempdir/python-vdf"
            export PYTHONPATH="$tempdir/python-vdf"

test-populate-depot:debian-11:
    extends: .test-populate-depot:deb
    image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/debian:bullseye-slim

reuse:
    stage: test
    needs: []
    image:
        name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/fsfe/reuse:latest
        entrypoint: [""]
    script:
        - reuse lint

# vim:set sw=4 sts=4 et:
